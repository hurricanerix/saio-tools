#!/usr/bin/env python

# Copyright (c) 2015 Richard Hawkins
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import calendar
import hashlib
import json
import logging
import os
import random
import string
import time
import uuid

from gevent import monkey
from gevent.pool import Pool
import requests


monkey.patch_all()

DEFAULT_MIN_SEGMENT_SIZE = 1024 * 1024  # 1 MiB

logging.basicConfig()
logger = logging.getLogger('saio-tools-slo')


def log_request(r):
    if r.ok:
        log_func = logger.debug
    else:
        log_func = logger.warning
    log_func('{0}({1}, {2}): {3}'.format(
             r.request.method, r.status_code,
             r.headers.get('x-trans-id'), r.url))


def make_request(method, url, headers, params, data, resp):
    method = method.lower()
    method_func = None
    if method == 'get':
        method_func = requests.get
    elif method == 'put':
        method_func = requests.put
    elif method == 'post':
        method_func = requests.post
    elif method == 'delete':
        method_func = requests.delete
    r = method_func(url, headers=headers, params=params, data=data)
    log_request(r)
    resp.append(r)


def concurrent_requests(concurrency, reqs, resp=None):
    if resp is None:
        resp = []
    pool = Pool(concurrency)
    jobs = [pool.spawn(make_request, m, u, h, p, d, resp)
            for m, u, h, p, d, in reqs] 
    pool.join()


def create_segments(storage_url, token, objects, concurrency=10, delete_after=300):
    data = []

    container_requests = []
    object_requests = []

    for c, o, s in objects:
        headers={'x-auth-token': token}
        container_url = '{0}/{1}'.format(storage_url, c)
        container_requests.append(('PUT', container_url, headers, {}, None))

        object_path = '{0}/{1}'.format(c, o)
        object_url = '{0}/{1}'.format(storage_url, object_path)
        headers = {'x-auth-token': token}
        if delete_after > 0:
            headers['x-delete-after'] = delete_after
        object_data = ''.join(
            [random.choice(string.letters) for i in xrange(int(s))])
        object_requests.append(('PUT', object_url, headers, {}, object_data))
        md5 = hashlib.md5()
        md5.update(object_data)
        data.append({'path': object_path,
                     'etag': md5.hexdigest(),
                     'size_bytes': int(s)})

    concurrent_requests(concurrency, container_requests)
    concurrent_requests(concurrency, object_requests)

    return data


def create_slo(storage_url, token, manifest, segment_data, delete_after=300):
    c = manifest[0]
    o = manifest[1]
    container_url = '{0}/{1}'.format(storage_url, c)
    r = requests.put(container_url, headers={'x-auth-token': token})
    log_request(r)
    manifest_path = '{0}/{1}'.format(c, o)
    manifest_url = '{0}/{1}'.format(storage_url, manifest_path)
    manifest_data = json.dumps(segment_data)
    headers = {'x-auth-token': token}
    if delete_after > 0:
        headers['x-delete-after'] = delete_after
    r = requests.put(manifest_url, headers=headers,
                     params={'multipart-manifest': 'put'},
                     data=manifest_data)
    log_request(r)


def remove_objects(storage_url, token, segments):
    for c, o, _ in segments:
        segment_path = '{0}/{1}'.format(c, o)
        segment_url = '{0}/{1}'.format(storage_url, segment_path)
        r = requests.delete(segment_url, headers={'x-auth-token': token})
        log_request(r)

        container_url = '{0}/{1}'.format(storage_url, c)
        r = requests.delete(container_url, headers={'x-auth-token': token})
        log_request(r)


def main():
    parser = argparse.ArgumentParser(
        description='SAIO Tools Static Large Object Helper.')
    parser.add_argument(
        'token', default=os.environ.get('ST_TOKEN'), nargs='?',
        help='Auth token to use when making requests.'
             'If none is provided, the environment variable'
             'ST_TOKEN will be used.')
    parser.add_argument(
        '--concurrency', '-c', type=int, default=10,
        help='Number of concurrent request to make at a time.')
    parser.add_argument(
        '--storage-url', default='http://127.0.0.1:8080/v1/AUTH_test',
        help='URL to account to create data in.')
    parser.add_argument(
        '--prefix', default='',
        help='Container prefix for created containers.')
    parser.add_argument(
        '--delete-after', type=int, default=300,
        help='Time in seconds to delete the objects after.'
             'If set to 0, the "X-Delete-After" header will not be set.')
    parser.add_argument(
        '--segment-count', type=int, default=3,
        help='Number of segments to create per SLO.')
    parser.add_argument(
        '--segment-size', type=int, default=(DEFAULT_MIN_SEGMENT_SIZE),
        help='Size in bytes to create each segment.')
    parser.add_argument(
        '--cleanup', action='store_true', default=False,
        help='If set, created containers and objects will be removed '
             'before the program terminates.')
    parser.add_argument(
        '--verbose', action='store_true', default=False,
        help='Show verbose info.')

    args = vars(parser.parse_args())
    token = args.get('token')
    if not token:
        logging.warning('Token not provided, please see help if this'
                        'was not intended.')

    storage_url = args.get('storage_url')
    if args.get('verbose'):
        logger.setLevel(logging.DEBUG)

    t = calendar.timegm(time.gmtime())

    def rand_container():
        return '{0}slo-T{1}-{2}'.format(args.get('prefix'), t,
                                        uuid.uuid4())

    manifest = (rand_container(), str(uuid.uuid4()), 0)
    segments = [(rand_container(), str(uuid.uuid4()),
                 args.get('segment_size'))
                for i in xrange(args.get('segment_count'))]

    segment_data = create_segments(storage_url, token, segments,
                                  delete_after=args.get('delete_after'),
                                  concurrency=args.get('concurrency'))
    create_slo(storage_url, token, manifest, segment_data,
               delete_after=args.get('delete_after'))

    cmd = ('curl -i -XGET '
           '-H"x-auth-token: {0}" {1}/{2}/{3}')
    print cmd.format(token, storage_url, manifest[0], manifest[1])

    if args.get('cleanup'):
        remove_objects(storage_url, token, segments)
        remove_objects(storage_url, token, [manifest])


if __name__ == '__main__':
    main()
